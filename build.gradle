//querydsl 추가
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    //jacoco 추가
    id 'jacoco'
}

group = 'com.koreanbrains'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //Query logging
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //Bootpay 추가
    implementation 'io.github.bootpay:backend:+'
}

tasks.named('test') {
    useJUnitPlatform()

    //jacoco 추가
    finalizedBy('jacocoTestReport')
}


//querydsl 추가 시작
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

//jacoco 추가 시작
jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/common/config/**',
                            '**/common/exception/**',
                            '**/common/util/p6spy/**',
                            '**/common/util/bootpay/**',
                            '**/common/util/file/**',
                            '**/controller/file/**'
                    ] + Qdomains)
                })
        )
    }

    finalizedBy('jacocoTestCoverageVerification')
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '**.QA'..'**.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true

            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1
            }

            excludes = [
                    '**.*Application*',
                    '**.common.config.**',
                    '**.common.exception.**',
                    '**.common.util.p6spy.**',
                    '**.common.util.bootpay.**',
                    '**.common.util.file.**',
                    '**.controller.file.**'
            ] + Qdomains
        }
    }
}
//jacoco 추가 끝